import axios from 'axios';
import type { Academico } from '../types';
import { authService } from './authService';

const API_URL = 'http://localhost:3000';

// Crear instancia de axios con configuraci√≥n base
const api = axios.create({
  baseURL: API_URL,
  headers: {
    'Content-Type': 'application/json',
  },
});

// Interceptor para agregar token
api.interceptors.request.use(
  (config) => {
    const token = authService.getToken();
    if (token) {
      config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
  },
  (error) => Promise.reject(error)
);

export const academicoService = {
  // Obtener todos los acad√©micos
  getAcademicos: async (): Promise<Academico[]> => {
    try {
      console.log('üë®‚Äçüè´ Obteniendo lista de acad√©micos...');
      const response = await api.get('/academico');
      console.log('‚úÖ Acad√©micos obtenidos:', response.data.length);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error obteniendo acad√©micos:', error);
      throw error;
    }
  },

  // Obtener un acad√©mico por ID
  getAcademicoById: async (id: string): Promise<Academico> => {
    try {
      console.log(`üë§ Obteniendo acad√©mico con ID: ${id}`);
      const response = await api.get(`/academico/${id}`);
      console.log('‚úÖ Acad√©mico obtenido:', response.data.nombres);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error obteniendo acad√©mico ${id}:`, error);
      throw error;
    }
  },

  // Crear un nuevo acad√©mico
  crearAcademico: async (academico: Omit<Academico, 'id'>): Promise<Academico> => {
    try {
      console.log('‚ûï Creando nuevo acad√©mico:', academico.nombres);
      const response = await api.post('/academico', academico);
      console.log('‚úÖ Acad√©mico creado con ID:', response.data.id);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error creando acad√©mico:', error);
      throw error;
    }
  },

  // Actualizar un acad√©mico
  actualizarAcademico: async (id: string, academico: Partial<Academico>): Promise<Academico> => {
    try {
      console.log(`‚úèÔ∏è Actualizando acad√©mico: ${id}`);
      const response = await api.patch(`/academico/${id}`, academico);
      console.log('‚úÖ Acad√©mico actualizado');
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error actualizando acad√©mico ${id}:`, error);
      throw error;
    }
  },

  // Eliminar un acad√©mico
  eliminarAcademico: async (id: string): Promise<void> => {
    try {
      console.log(`üóëÔ∏è Eliminando acad√©mico: ${id}`);
      await api.delete(`/academico/${id}`);
      console.log('‚úÖ Acad√©mico eliminado');
    } catch (error) {
      console.error(`‚ùå Error eliminando acad√©mico ${id}:`, error);
      throw error;
    }
  },

  // Obtener acad√©micos por instituci√≥n
  getAcademicosPorInstitucion: async (institucionId: string): Promise<Academico[]> => {
    try {
      console.log(`üè´ Obteniendo acad√©micos de instituci√≥n: ${institucionId}`);
      const response = await api.get(`/academico/institucion/${institucionId}`);
      console.log('‚úÖ Acad√©micos de instituci√≥n obtenidos:', response.data.length);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error obteniendo acad√©micos de instituci√≥n ${institucionId}:`, error);
      throw error;
    }
  },

  // Obtener acad√©micos por especialidad
  getAcademicosPorEspecialidad: async (especialidad: string): Promise<Academico[]> => {
    try {
      console.log(`üéì Obteniendo acad√©micos de especialidad: ${especialidad}`);
      const response = await api.get(`/academico/especialidad/${especialidad}`);
      console.log('‚úÖ Acad√©micos de especialidad obtenidos:', response.data.length);
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error obteniendo acad√©micos de especialidad ${especialidad}:`, error);
      throw error;
    }
  },

  // Activar/Desactivar acad√©mico
  toggleAcademicoEstado: async (id: string): Promise<Academico> => {
    try {
      console.log(`üîÑ Cambiando estado del acad√©mico: ${id}`);
      const response = await api.patch(`/academico/${id}/toggle-estado`);
      console.log('‚úÖ Estado del acad√©mico cambiado');
      return response.data;
    } catch (error) {
      console.error(`‚ùå Error cambiando estado del acad√©mico ${id}:`, error);
      throw error;
    }
  },

  // Buscar acad√©micos
  buscarAcademicos: async (termino: string): Promise<Academico[]> => {
    try {
      console.log(`üîç Buscando acad√©micos con t√©rmino: ${termino}`);
      const response = await api.get(`/academico/buscar?q=${encodeURIComponent(termino)}`);
      console.log('‚úÖ B√∫squeda completada, resultados:', response.data.length);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error buscando acad√©micos:', error);
      throw error;
    }
  },

  // Obtener estad√≠sticas de acad√©micos
  getEstadisticas: async () => {
    try {
      console.log('üìä Obteniendo estad√≠sticas de acad√©micos...');
      const response = await api.get('/academico/estadisticas');
      console.log('‚úÖ Estad√≠sticas obtenidas');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error obteniendo estad√≠sticas:', error);
      throw error;
    }
  },

  // Carga masiva de acad√©micos
  cargaMasiva: async (archivo: File): Promise<{ exitosos: number; errores: string[] }> => {
    try {
      console.log('üìÇ Iniciando carga masiva de acad√©micos...');
      const formData = new FormData();
      formData.append('archivo', archivo);
      
      const response = await api.post('/academico/carga-masiva', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });
      
      console.log('‚úÖ Carga masiva completada:', response.data);
      return response.data;
    } catch (error) {
      console.error('‚ùå Error en carga masiva:', error);
      throw error;
    }
  },

  // Exportar acad√©micos a Excel
  exportarAcademicos: async (): Promise<Blob> => {
    try {
      console.log('üì• Exportando acad√©micos...');
      const response = await api.get('/academico/exportar', {
        responseType: 'blob'
      });
      
      console.log('‚úÖ Exportaci√≥n completada');
      return response.data;
    } catch (error) {
      console.error('‚ùå Error exportando acad√©micos:', error);
      throw error;
    }
  }
};

export default academicoService;